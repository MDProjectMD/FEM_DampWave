#include "Matrix.h"
#include "MatLib.h"
#include "Stochastic.h"
#include "Define.h"
#include "FileIO.h"

typedef Eigen::SparseMatrix<double> SpMat; // declares a column-major sparse matrix type of double
typedef Eigen::Triplet<double> triplet;

int main(){
    Engine* ep = StartMatlabEngine();
    /*
    double* vel_array, * time_array;
    GenerateStochasticVelocitySeries(&vel_array, &time_array, Nt, dt);
    //MatrixMemcpyCToMatlab(ep, vel_array, Nt, 1, "y");
    Write1DFunc(time_array, vel_array, Nt, "velz");
    */
   int n = 4; // size of the image
   std::vector<triplet> coefficients; // list of non-zeros coefficients
   Eigen::VectorXd b(n); // the rbight hand side-vector 
//-----------------------------------------------------------
// Create dense Matrix A
//-----------------------------------------------------------
   /*Eigen::MatrixXd MtxA = Eigen::MatrixXd::Random(4, 4);
   MtxA << 5,2,4,0, 1,5,0,4, 3,0,5,2, 0,3,1,5;*/
Eigen::MatrixXd MtxA = Eigen::MatrixXd::Identity(4,4);
//------------------------------------------
// Now create/populate an according Sparse Matrix
//------------------------------------------
   for(int j=0; j<n; ++j)
   {
      for(int i=0; i<n; ++i)
      {
           if (MtxA(j,i)*MtxA(j,i)>1e-5) {
         coefficients.push_back(triplet(j,i,MtxA(j,i)));
         } //if..
      } // ..for i
   } 
   SpMat SparseA(n,n);
   SparseA.setFromTriplets(coefficients.begin(), coefficients.end());
//------------------------------------------
   std::cout << "Here is the Sparse matrix SparseA:\n"<< SparseA << std::endl;
   
//-----------------------------------------------------------
//   A right hand side vector (RHS Vector)is declared. I chose these values such that
//   the solution will be x1=1 x2=2 x3=3 x4=4
//-----------------------------------------------------------
   b << 21,27,26,29; //this is RHS for solution vector x=1,2,3,4
   //b << 26,28,29,29; //this is RHS for solution vector x=2,2,3,4
   std::cout << "Here is the Vector b:\n"<< b << std::endl;


   SparseMatrixEigen SpMatrixA(&SparseA);
   SpMatrixA.build(coefficients);
   int niteration; double error;
   Eigen::VectorXd X = SpMatrixA.solve_linear_sym(b, &niteration, &error);
   std::cout << "Here is the Vector X:\n"<< X << std::endl;
   std::cout << "Here is the Vector X:\n"<< SparseA*X << std::endl;
   printf("%d\t%e\n", niteration, error);


}



